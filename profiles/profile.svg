<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (10 samples, 1.57%)</title><rect x="0.0000%" y="469" width="1.5674%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="479.50"></text></g><g><title>[[heap]] (13 samples, 2.04%)</title><rect x="0.0000%" y="485" width="2.0376%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="495.50">[..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.47%)</title><rect x="1.5674%" y="469" width="0.4702%" height="15" fill="rgb(221,193,54)"/><text x="1.8174%" y="479.50"></text></g><g><title>[[stack]] (1 samples, 0.16%)</title><rect x="2.0376%" y="485" width="0.1567%" height="15" fill="rgb(248,212,6)"/><text x="2.2876%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.16%)</title><rect x="2.0376%" y="469" width="0.1567%" height="15" fill="rgb(208,68,35)"/><text x="2.2876%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (19 samples, 2.98%)</title><rect x="2.1944%" y="469" width="2.9781%" height="15" fill="rgb(232,128,0)"/><text x="2.4444%" y="479.50">&lt;st..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (20 samples, 3.13%)</title><rect x="5.1724%" y="469" width="3.1348%" height="15" fill="rgb(207,160,47)"/><text x="5.4224%" y="479.50">cor..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (3 samples, 0.47%)</title><rect x="8.3072%" y="453" width="0.4702%" height="15" fill="rgb(228,23,34)"/><text x="8.5572%" y="463.50"></text></g><g><title>day15::solve (4 samples, 0.63%)</title><rect x="8.3072%" y="469" width="0.6270%" height="15" fill="rgb(218,30,26)"/><text x="8.5572%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.16%)</title><rect x="8.7774%" y="453" width="0.1567%" height="15" fill="rgb(220,122,19)"/><text x="9.0274%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (15 samples, 2.35%)</title><rect x="8.9342%" y="469" width="2.3511%" height="15" fill="rgb(250,228,42)"/><text x="9.1842%" y="479.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.16%)</title><rect x="11.1285%" y="453" width="0.1567%" height="15" fill="rgb(240,193,28)"/><text x="11.3785%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 0.16%)</title><rect x="11.1285%" y="437" width="0.1567%" height="15" fill="rgb(216,20,37)"/><text x="11.3785%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.16%)</title><rect x="11.1285%" y="421" width="0.1567%" height="15" fill="rgb(206,188,39)"/><text x="11.3785%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.16%)</title><rect x="11.2853%" y="469" width="0.1567%" height="15" fill="rgb(217,207,13)"/><text x="11.5353%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.31%)</title><rect x="11.4420%" y="469" width="0.3135%" height="15" fill="rgb(231,73,38)"/><text x="11.6920%" y="479.50"></text></g><g><title>[unknown] (62 samples, 9.72%)</title><rect x="2.1944%" y="485" width="9.7179%" height="15" fill="rgb(225,20,46)"/><text x="2.4444%" y="495.50">[unknown]</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (1 samples, 0.16%)</title><rect x="11.7555%" y="469" width="0.1567%" height="15" fill="rgb(210,31,41)"/><text x="12.0055%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (4 samples, 0.63%)</title><rect x="18.3386%" y="213" width="0.6270%" height="15" fill="rgb(221,200,47)"/><text x="18.5886%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 1.57%)</title><rect x="21.4734%" y="133" width="1.5674%" height="15" fill="rgb(226,26,5)"/><text x="21.7234%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20 samples, 3.13%)</title><rect x="21.0031%" y="149" width="3.1348%" height="15" fill="rgb(249,33,26)"/><text x="21.2531%" y="159.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 1.10%)</title><rect x="23.0408%" y="133" width="1.0972%" height="15" fill="rgb(235,183,28)"/><text x="23.2908%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 2.04%)</title><rect x="25.0784%" y="133" width="2.0376%" height="15" fill="rgb(221,5,38)"/><text x="25.3284%" y="143.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (55 samples, 8.62%)</title><rect x="19.7492%" y="197" width="8.6207%" height="15" fill="rgb(247,18,42)"/><text x="19.9992%" y="207.50">&lt;std::collec..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (55 samples, 8.62%)</title><rect x="19.7492%" y="181" width="8.6207%" height="15" fill="rgb(241,131,45)"/><text x="19.9992%" y="191.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (55 samples, 8.62%)</title><rect x="19.7492%" y="165" width="8.6207%" height="15" fill="rgb(249,31,29)"/><text x="19.9992%" y="175.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (27 samples, 4.23%)</title><rect x="24.1379%" y="149" width="4.2320%" height="15" fill="rgb(225,111,53)"/><text x="24.3879%" y="159.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 1.25%)</title><rect x="27.1160%" y="133" width="1.2539%" height="15" fill="rgb(238,160,17)"/><text x="27.3660%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (32 samples, 5.02%)</title><rect x="28.3699%" y="197" width="5.0157%" height="15" fill="rgb(214,148,48)"/><text x="28.6199%" y="207.50">&lt;std::..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (14 samples, 2.19%)</title><rect x="31.1912%" y="181" width="2.1944%" height="15" fill="rgb(232,36,49)"/><text x="31.4412%" y="191.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (14 samples, 2.19%)</title><rect x="31.1912%" y="165" width="2.1944%" height="15" fill="rgb(209,103,24)"/><text x="31.4412%" y="175.50">c..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (14 samples, 2.19%)</title><rect x="31.1912%" y="149" width="2.1944%" height="15" fill="rgb(229,88,8)"/><text x="31.4412%" y="159.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.47%)</title><rect x="37.4608%" y="101" width="0.4702%" height="15" fill="rgb(213,181,19)"/><text x="37.7108%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 1.72%)</title><rect x="36.6771%" y="117" width="1.7241%" height="15" fill="rgb(254,191,54)"/><text x="36.9271%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.47%)</title><rect x="37.9310%" y="101" width="0.4702%" height="15" fill="rgb(241,83,37)"/><text x="38.1810%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.31%)</title><rect x="38.4013%" y="117" width="0.3135%" height="15" fill="rgb(233,36,39)"/><text x="38.6513%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 5.17%)</title><rect x="34.7962%" y="133" width="5.1724%" height="15" fill="rgb(226,3,54)"/><text x="35.0462%" y="143.50">&lt;core:..</text></g><g><title>core::hash::sip::u8to64_le (8 samples, 1.25%)</title><rect x="38.7147%" y="117" width="1.2539%" height="15" fill="rgb(245,192,40)"/><text x="38.9647%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (150 samples, 23.51%)</title><rect x="18.9655%" y="213" width="23.5110%" height="15" fill="rgb(238,167,29)"/><text x="19.2155%" y="223.50">hashbrown::map::make_hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (58 samples, 9.09%)</title><rect x="33.3856%" y="197" width="9.0909%" height="15" fill="rgb(232,182,51)"/><text x="33.6356%" y="207.50">core::hash::i..</text></g><g><title>core::hash::Hasher::write_usize (49 samples, 7.68%)</title><rect x="34.7962%" y="181" width="7.6803%" height="15" fill="rgb(231,60,39)"/><text x="35.0462%" y="191.50">core::hash:..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (49 samples, 7.68%)</title><rect x="34.7962%" y="165" width="7.6803%" height="15" fill="rgb(208,69,12)"/><text x="35.0462%" y="175.50">&lt;std::colle..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (49 samples, 7.68%)</title><rect x="34.7962%" y="149" width="7.6803%" height="15" fill="rgb(235,93,37)"/><text x="35.0462%" y="159.50">&lt;core::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (16 samples, 2.51%)</title><rect x="39.9687%" y="133" width="2.5078%" height="15" fill="rgb(213,116,39)"/><text x="40.2187%" y="143.50">co..</text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.10%)</title><rect x="42.4765%" y="197" width="1.0972%" height="15" fill="rgb(222,207,29)"/><text x="42.7265%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.94%)</title><rect x="42.6332%" y="181" width="0.9404%" height="15" fill="rgb(206,96,30)"/><text x="42.8832%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.94%)</title><rect x="42.6332%" y="165" width="0.9404%" height="15" fill="rgb(218,138,4)"/><text x="42.8832%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (4 samples, 0.63%)</title><rect x="43.5737%" y="197" width="0.6270%" height="15" fill="rgb(250,191,14)"/><text x="43.8237%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (4 samples, 0.63%)</title><rect x="43.5737%" y="181" width="0.6270%" height="15" fill="rgb(239,60,40)"/><text x="43.8237%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.78%)</title><rect x="44.2006%" y="165" width="0.7837%" height="15" fill="rgb(206,27,48)"/><text x="44.4506%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (1 samples, 0.16%)</title><rect x="44.9843%" y="165" width="0.1567%" height="15" fill="rgb(225,35,8)"/><text x="45.2343%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.31%)</title><rect x="45.1411%" y="165" width="0.3135%" height="15" fill="rgb(250,213,24)"/><text x="45.3911%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.31%)</title><rect x="45.1411%" y="149" width="0.3135%" height="15" fill="rgb(247,123,22)"/><text x="45.3911%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.31%)</title><rect x="45.1411%" y="133" width="0.3135%" height="15" fill="rgb(231,138,38)"/><text x="45.3911%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (175 samples, 27.43%)</title><rect x="18.3386%" y="277" width="27.4295%" height="15" fill="rgb(231,145,46)"/><text x="18.5886%" y="287.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (175 samples, 27.43%)</title><rect x="18.3386%" y="261" width="27.4295%" height="15" fill="rgb(251,118,11)"/><text x="18.5886%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (175 samples, 27.43%)</title><rect x="18.3386%" y="245" width="27.4295%" height="15" fill="rgb(217,147,25)"/><text x="18.5886%" y="255.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (175 samples, 27.43%)</title><rect x="18.3386%" y="229" width="27.4295%" height="15" fill="rgb(247,81,37)"/><text x="18.5886%" y="239.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (21 samples, 3.29%)</title><rect x="42.4765%" y="213" width="3.2915%" height="15" fill="rgb(209,12,38)"/><text x="42.7265%" y="223.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (10 samples, 1.57%)</title><rect x="44.2006%" y="197" width="1.5674%" height="15" fill="rgb(227,1,9)"/><text x="44.4506%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (10 samples, 1.57%)</title><rect x="44.2006%" y="181" width="1.5674%" height="15" fill="rgb(248,47,43)"/><text x="44.4506%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.31%)</title><rect x="45.4545%" y="165" width="0.3135%" height="15" fill="rgb(221,10,30)"/><text x="45.7045%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.31%)</title><rect x="45.4545%" y="149" width="0.3135%" height="15" fill="rgb(210,229,1)"/><text x="45.7045%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.31%)</title><rect x="45.4545%" y="133" width="0.3135%" height="15" fill="rgb(222,148,37)"/><text x="45.7045%" y="143.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.31%)</title><rect x="45.4545%" y="117" width="0.3135%" height="15" fill="rgb(234,67,33)"/><text x="45.7045%" y="127.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (5 samples, 0.78%)</title><rect x="45.7680%" y="277" width="0.7837%" height="15" fill="rgb(247,98,35)"/><text x="46.0180%" y="287.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (4 samples, 0.63%)</title><rect x="45.9248%" y="261" width="0.6270%" height="15" fill="rgb(247,138,52)"/><text x="46.1748%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (4 samples, 0.63%)</title><rect x="46.5517%" y="277" width="0.6270%" height="15" fill="rgb(213,79,30)"/><text x="46.8017%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.16%)</title><rect x="47.1787%" y="277" width="0.1567%" height="15" fill="rgb(246,177,23)"/><text x="47.4287%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.16%)</title><rect x="47.1787%" y="261" width="0.1567%" height="15" fill="rgb(230,62,27)"/><text x="47.4287%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.16%)</title><rect x="47.1787%" y="245" width="0.1567%" height="15" fill="rgb(216,154,8)"/><text x="47.4287%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.16%)</title><rect x="47.1787%" y="229" width="0.1567%" height="15" fill="rgb(244,35,45)"/><text x="47.4287%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (1 samples, 0.16%)</title><rect x="47.1787%" y="213" width="0.1567%" height="15" fill="rgb(251,115,12)"/><text x="47.4287%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.16%)</title><rect x="47.1787%" y="197" width="0.1567%" height="15" fill="rgb(240,54,50)"/><text x="47.4287%" y="207.50"></text></g><g><title>__GI_munmap (1 samples, 0.16%)</title><rect x="47.1787%" y="181" width="0.1567%" height="15" fill="rgb(233,84,52)"/><text x="47.4287%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (2 samples, 0.31%)</title><rect x="47.8056%" y="213" width="0.3135%" height="15" fill="rgb(207,117,47)"/><text x="48.0556%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.78%)</title><rect x="49.8433%" y="133" width="0.7837%" height="15" fill="rgb(249,43,39)"/><text x="50.0933%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.78%)</title><rect x="50.6270%" y="133" width="0.7837%" height="15" fill="rgb(209,38,44)"/><text x="50.8770%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 2.19%)</title><rect x="49.3730%" y="149" width="2.1944%" height="15" fill="rgb(236,212,23)"/><text x="49.6230%" y="159.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.16%)</title><rect x="51.4107%" y="133" width="0.1567%" height="15" fill="rgb(242,79,21)"/><text x="51.6607%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.63%)</title><rect x="53.9185%" y="133" width="0.6270%" height="15" fill="rgb(211,96,35)"/><text x="54.1685%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (46 samples, 7.21%)</title><rect x="48.4326%" y="197" width="7.2100%" height="15" fill="rgb(253,215,40)"/><text x="48.6826%" y="207.50">&lt;std::coll..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (46 samples, 7.21%)</title><rect x="48.4326%" y="181" width="7.2100%" height="15" fill="rgb(211,81,21)"/><text x="48.6826%" y="191.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (46 samples, 7.21%)</title><rect x="48.4326%" y="165" width="7.2100%" height="15" fill="rgb(208,190,38)"/><text x="48.6826%" y="175.50">&lt;core::has..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (26 samples, 4.08%)</title><rect x="51.5674%" y="149" width="4.0752%" height="15" fill="rgb(235,213,38)"/><text x="51.8174%" y="159.50">&lt;cor..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 1.10%)</title><rect x="54.5455%" y="133" width="1.0972%" height="15" fill="rgb(237,122,38)"/><text x="54.7955%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 1.41%)</title><rect x="57.3668%" y="149" width="1.4107%" height="15" fill="rgb(244,218,35)"/><text x="57.6168%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (21 samples, 3.29%)</title><rect x="55.6426%" y="197" width="3.2915%" height="15" fill="rgb(240,68,47)"/><text x="55.8926%" y="207.50">&lt;st..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (10 samples, 1.57%)</title><rect x="57.3668%" y="181" width="1.5674%" height="15" fill="rgb(210,16,53)"/><text x="57.6168%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (10 samples, 1.57%)</title><rect x="57.3668%" y="165" width="1.5674%" height="15" fill="rgb(235,124,12)"/><text x="57.6168%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (1 samples, 0.16%)</title><rect x="58.7774%" y="149" width="0.1567%" height="15" fill="rgb(224,169,11)"/><text x="59.0274%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.31%)</title><rect x="62.0690%" y="101" width="0.3135%" height="15" fill="rgb(250,166,2)"/><text x="62.3190%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.47%)</title><rect x="62.3824%" y="101" width="0.4702%" height="15" fill="rgb(242,216,29)"/><text x="62.6324%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 1.88%)</title><rect x="61.1285%" y="117" width="1.8809%" height="15" fill="rgb(230,116,27)"/><text x="61.3785%" y="127.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.16%)</title><rect x="62.8527%" y="101" width="0.1567%" height="15" fill="rgb(228,99,48)"/><text x="63.1027%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 3.92%)</title><rect x="59.8746%" y="133" width="3.9185%" height="15" fill="rgb(253,11,6)"/><text x="60.1246%" y="143.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.78%)</title><rect x="63.0094%" y="117" width="0.7837%" height="15" fill="rgb(247,143,39)"/><text x="63.2594%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (111 samples, 17.40%)</title><rect x="48.1191%" y="213" width="17.3981%" height="15" fill="rgb(236,97,10)"/><text x="48.3691%" y="223.50">hashbrown::map::make_hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (42 samples, 6.58%)</title><rect x="58.9342%" y="197" width="6.5831%" height="15" fill="rgb(233,208,19)"/><text x="59.1842%" y="207.50">core::has..</text></g><g><title>core::hash::Hasher::write_usize (39 samples, 6.11%)</title><rect x="59.4044%" y="181" width="6.1129%" height="15" fill="rgb(216,164,2)"/><text x="59.6544%" y="191.50">core::ha..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 5.64%)</title><rect x="59.8746%" y="165" width="5.6426%" height="15" fill="rgb(220,129,5)"/><text x="60.1246%" y="175.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (36 samples, 5.64%)</title><rect x="59.8746%" y="149" width="5.6426%" height="15" fill="rgb(242,17,10)"/><text x="60.1246%" y="159.50">&lt;core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (11 samples, 1.72%)</title><rect x="63.7931%" y="133" width="1.7241%" height="15" fill="rgb(242,107,0)"/><text x="64.0431%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 1.25%)</title><rect x="66.7712%" y="165" width="1.2539%" height="15" fill="rgb(251,28,31)"/><text x="67.0212%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.41%)</title><rect x="66.7712%" y="181" width="1.4107%" height="15" fill="rgb(233,223,10)"/><text x="67.0212%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.16%)</title><rect x="68.0251%" y="165" width="0.1567%" height="15" fill="rgb(215,21,27)"/><text x="68.2751%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 1.72%)</title><rect x="66.6144%" y="197" width="1.7241%" height="15" fill="rgb(232,23,21)"/><text x="66.8644%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.16%)</title><rect x="68.1818%" y="181" width="0.1567%" height="15" fill="rgb(244,5,23)"/><text x="68.4318%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (43 samples, 6.74%)</title><rect x="68.3386%" y="197" width="6.7398%" height="15" fill="rgb(226,81,46)"/><text x="68.5886%" y="207.50">hashbrown..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (43 samples, 6.74%)</title><rect x="68.3386%" y="181" width="6.7398%" height="15" fill="rgb(247,70,30)"/><text x="68.5886%" y="191.50">core::cmp..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (5 samples, 0.78%)</title><rect x="75.0784%" y="197" width="0.7837%" height="15" fill="rgb(212,68,19)"/><text x="75.3284%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (5 samples, 0.78%)</title><rect x="75.0784%" y="181" width="0.7837%" height="15" fill="rgb(240,187,13)"/><text x="75.3284%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5 samples, 0.78%)</title><rect x="75.0784%" y="165" width="0.7837%" height="15" fill="rgb(223,113,26)"/><text x="75.3284%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.78%)</title><rect x="75.0784%" y="149" width="0.7837%" height="15" fill="rgb(206,192,2)"/><text x="75.3284%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="75.8621%" y="165" width="0.1567%" height="15" fill="rgb(241,108,4)"/><text x="76.1121%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.31%)</title><rect x="76.0188%" y="165" width="0.3135%" height="15" fill="rgb(247,173,49)"/><text x="76.2688%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.63%)</title><rect x="76.3323%" y="165" width="0.6270%" height="15" fill="rgb(224,114,35)"/><text x="76.5823%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.63%)</title><rect x="76.3323%" y="149" width="0.6270%" height="15" fill="rgb(245,159,27)"/><text x="76.5823%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.63%)</title><rect x="76.3323%" y="133" width="0.6270%" height="15" fill="rgb(245,172,44)"/><text x="76.5823%" y="143.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (192 samples, 30.09%)</title><rect x="47.3354%" y="277" width="30.0940%" height="15" fill="rgb(236,23,11)"/><text x="47.5854%" y="287.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::cont..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key (191 samples, 29.94%)</title><rect x="47.4922%" y="261" width="29.9373%" height="15" fill="rgb(205,117,38)"/><text x="47.7422%" y="271.50">hashbrown::map::HashMap&lt;K,V,S&gt;::contains_key</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (189 samples, 29.62%)</title><rect x="47.8056%" y="245" width="29.6238%" height="15" fill="rgb(237,72,25)"/><text x="48.0556%" y="255.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (189 samples, 29.62%)</title><rect x="47.8056%" y="229" width="29.6238%" height="15" fill="rgb(244,70,9)"/><text x="48.0556%" y="239.50">hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (76 samples, 11.91%)</title><rect x="65.5172%" y="213" width="11.9122%" height="15" fill="rgb(217,125,39)"/><text x="65.7672%" y="223.50">hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (10 samples, 1.57%)</title><rect x="75.8621%" y="197" width="1.5674%" height="15" fill="rgb(235,36,10)"/><text x="76.1121%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (10 samples, 1.57%)</title><rect x="75.8621%" y="181" width="1.5674%" height="15" fill="rgb(251,123,47)"/><text x="76.1121%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.47%)</title><rect x="76.9592%" y="165" width="0.4702%" height="15" fill="rgb(221,13,13)"/><text x="77.2092%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.47%)</title><rect x="76.9592%" y="149" width="0.4702%" height="15" fill="rgb(238,131,9)"/><text x="77.2092%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.47%)</title><rect x="76.9592%" y="133" width="0.4702%" height="15" fill="rgb(211,50,8)"/><text x="77.2092%" y="143.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.47%)</title><rect x="76.9592%" y="117" width="0.4702%" height="15" fill="rgb(245,182,24)"/><text x="77.2092%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (3 samples, 0.47%)</title><rect x="77.7429%" y="245" width="0.4702%" height="15" fill="rgb(242,14,37)"/><text x="77.9929%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.31%)</title><rect x="78.8401%" y="165" width="0.3135%" height="15" fill="rgb(246,228,12)"/><text x="79.0901%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.78%)</title><rect x="78.5266%" y="181" width="0.7837%" height="15" fill="rgb(213,55,15)"/><text x="78.7766%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.16%)</title><rect x="79.1536%" y="165" width="0.1567%" height="15" fill="rgb(209,9,3)"/><text x="79.4036%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (10 samples, 1.57%)</title><rect x="79.7806%" y="165" width="1.5674%" height="15" fill="rgb(230,59,30)"/><text x="80.0306%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (26 samples, 4.08%)</title><rect x="78.2132%" y="229" width="4.0752%" height="15" fill="rgb(209,121,21)"/><text x="78.4632%" y="239.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (26 samples, 4.08%)</title><rect x="78.2132%" y="213" width="4.0752%" height="15" fill="rgb(220,109,13)"/><text x="78.4632%" y="223.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (26 samples, 4.08%)</title><rect x="78.2132%" y="197" width="4.0752%" height="15" fill="rgb(232,18,1)"/><text x="78.4632%" y="207.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 2.98%)</title><rect x="79.3103%" y="181" width="2.9781%" height="15" fill="rgb(215,41,42)"/><text x="79.5603%" y="191.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.94%)</title><rect x="81.3480%" y="165" width="0.9404%" height="15" fill="rgb(224,123,36)"/><text x="81.5980%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.63%)</title><rect x="82.9154%" y="181" width="0.6270%" height="15" fill="rgb(240,125,3)"/><text x="83.1654%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 1.57%)</title><rect x="82.2884%" y="229" width="1.5674%" height="15" fill="rgb(205,98,50)"/><text x="82.5384%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (6 samples, 0.94%)</title><rect x="82.9154%" y="213" width="0.9404%" height="15" fill="rgb(205,185,37)"/><text x="83.1654%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (6 samples, 0.94%)</title><rect x="82.9154%" y="197" width="0.9404%" height="15" fill="rgb(238,207,15)"/><text x="83.1654%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.31%)</title><rect x="83.5423%" y="181" width="0.3135%" height="15" fill="rgb(213,199,42)"/><text x="83.7923%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.16%)</title><rect x="85.8934%" y="133" width="0.1567%" height="15" fill="rgb(235,201,11)"/><text x="86.1434%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.63%)</title><rect x="86.0502%" y="133" width="0.6270%" height="15" fill="rgb(207,46,11)"/><text x="86.3002%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 1.57%)</title><rect x="85.7367%" y="149" width="1.5674%" height="15" fill="rgb(241,35,35)"/><text x="85.9867%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.63%)</title><rect x="86.6771%" y="133" width="0.6270%" height="15" fill="rgb(243,32,47)"/><text x="86.9271%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.16%)</title><rect x="87.3041%" y="149" width="0.1567%" height="15" fill="rgb(247,202,23)"/><text x="87.5541%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 3.76%)</title><rect x="84.4828%" y="165" width="3.7618%" height="15" fill="rgb(219,102,11)"/><text x="84.7328%" y="175.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.78%)</title><rect x="87.4608%" y="149" width="0.7837%" height="15" fill="rgb(243,110,44)"/><text x="87.7108%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (68 samples, 10.66%)</title><rect x="78.2132%" y="245" width="10.6583%" height="15" fill="rgb(222,74,54)"/><text x="78.4632%" y="255.50">hashbrown::map::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (32 samples, 5.02%)</title><rect x="83.8558%" y="229" width="5.0157%" height="15" fill="rgb(216,99,12)"/><text x="84.1058%" y="239.50">core::..</text></g><g><title>core::hash::Hasher::write_usize (28 samples, 4.39%)</title><rect x="84.4828%" y="213" width="4.3887%" height="15" fill="rgb(226,22,26)"/><text x="84.7328%" y="223.50">core:..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (28 samples, 4.39%)</title><rect x="84.4828%" y="197" width="4.3887%" height="15" fill="rgb(217,163,10)"/><text x="84.7328%" y="207.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (28 samples, 4.39%)</title><rect x="84.4828%" y="181" width="4.3887%" height="15" fill="rgb(213,25,53)"/><text x="84.7328%" y="191.50">&lt;core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.63%)</title><rect x="88.2445%" y="165" width="0.6270%" height="15" fill="rgb(252,105,26)"/><text x="88.4945%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.63%)</title><rect x="89.0282%" y="229" width="0.6270%" height="15" fill="rgb(220,39,43)"/><text x="89.2782%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.47%)</title><rect x="89.1850%" y="213" width="0.4702%" height="15" fill="rgb(229,68,48)"/><text x="89.4350%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.47%)</title><rect x="89.1850%" y="197" width="0.4702%" height="15" fill="rgb(252,8,32)"/><text x="89.4350%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.16%)</title><rect x="89.6552%" y="197" width="0.1567%" height="15" fill="rgb(223,20,43)"/><text x="89.9052%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (2 samples, 0.31%)</title><rect x="89.8119%" y="197" width="0.3135%" height="15" fill="rgb(229,81,49)"/><text x="90.0619%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.31%)</title><rect x="90.1254%" y="197" width="0.3135%" height="15" fill="rgb(236,28,36)"/><text x="90.3754%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (87 samples, 13.64%)</title><rect x="77.4295%" y="277" width="13.6364%" height="15" fill="rgb(249,185,26)"/><text x="77.6795%" y="287.50">std::collections::has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_mut (85 samples, 13.32%)</title><rect x="77.7429%" y="261" width="13.3229%" height="15" fill="rgb(249,174,33)"/><text x="77.9929%" y="271.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (14 samples, 2.19%)</title><rect x="88.8715%" y="245" width="2.1944%" height="15" fill="rgb(233,201,37)"/><text x="89.1215%" y="255.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (9 samples, 1.41%)</title><rect x="89.6552%" y="229" width="1.4107%" height="15" fill="rgb(221,78,26)"/><text x="89.9052%" y="239.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (9 samples, 1.41%)</title><rect x="89.6552%" y="213" width="1.4107%" height="15" fill="rgb(250,127,30)"/><text x="89.9052%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.63%)</title><rect x="90.4389%" y="197" width="0.6270%" height="15" fill="rgb(230,49,44)"/><text x="90.6889%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (4 samples, 0.63%)</title><rect x="90.4389%" y="181" width="0.6270%" height="15" fill="rgb(229,67,23)"/><text x="90.6889%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (4 samples, 0.63%)</title><rect x="90.4389%" y="165" width="0.6270%" height="15" fill="rgb(249,83,47)"/><text x="90.6889%" y="175.50"></text></g><g><title>core::core_arch::simd::i8x16::new (4 samples, 0.63%)</title><rect x="90.4389%" y="149" width="0.6270%" height="15" fill="rgb(215,43,3)"/><text x="90.6889%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.16%)</title><rect x="92.0063%" y="181" width="0.1567%" height="15" fill="rgb(238,154,13)"/><text x="92.2563%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.16%)</title><rect x="92.0063%" y="165" width="0.1567%" height="15" fill="rgb(219,56,2)"/><text x="92.2563%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.47%)</title><rect x="91.8495%" y="229" width="0.4702%" height="15" fill="rgb(233,0,4)"/><text x="92.0995%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.47%)</title><rect x="91.8495%" y="213" width="0.4702%" height="15" fill="rgb(235,30,7)"/><text x="92.0995%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.47%)</title><rect x="91.8495%" y="197" width="0.4702%" height="15" fill="rgb(250,79,13)"/><text x="92.0995%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.16%)</title><rect x="92.1630%" y="181" width="0.1567%" height="15" fill="rgb(211,146,34)"/><text x="92.4130%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.63%)</title><rect x="92.3197%" y="229" width="0.6270%" height="15" fill="rgb(228,22,38)"/><text x="92.5697%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.16%)</title><rect x="92.7900%" y="213" width="0.1567%" height="15" fill="rgb(235,168,5)"/><text x="93.0400%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.16%)</title><rect x="92.7900%" y="197" width="0.1567%" height="15" fill="rgb(221,155,16)"/><text x="93.0400%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.16%)</title><rect x="92.7900%" y="181" width="0.1567%" height="15" fill="rgb(215,215,53)"/><text x="93.0400%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.16%)</title><rect x="92.9467%" y="165" width="0.1567%" height="15" fill="rgb(223,4,10)"/><text x="93.1967%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.16%)</title><rect x="92.9467%" y="149" width="0.1567%" height="15" fill="rgb(234,103,6)"/><text x="93.1967%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.16%)</title><rect x="92.9467%" y="133" width="0.1567%" height="15" fill="rgb(227,97,0)"/><text x="93.1967%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 1.41%)</title><rect x="91.8495%" y="245" width="1.4107%" height="15" fill="rgb(234,150,53)"/><text x="92.0995%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.31%)</title><rect x="92.9467%" y="229" width="0.3135%" height="15" fill="rgb(228,201,54)"/><text x="93.1967%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.31%)</title><rect x="92.9467%" y="213" width="0.3135%" height="15" fill="rgb(222,22,37)"/><text x="93.1967%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.31%)</title><rect x="92.9467%" y="197" width="0.3135%" height="15" fill="rgb(237,53,32)"/><text x="93.1967%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.31%)</title><rect x="92.9467%" y="181" width="0.3135%" height="15" fill="rgb(233,25,53)"/><text x="93.1967%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.16%)</title><rect x="93.1034%" y="165" width="0.1567%" height="15" fill="rgb(210,40,34)"/><text x="93.3534%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (2 samples, 0.31%)</title><rect x="93.2602%" y="245" width="0.3135%" height="15" fill="rgb(241,220,44)"/><text x="93.5102%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.31%)</title><rect x="93.2602%" y="229" width="0.3135%" height="15" fill="rgb(235,28,35)"/><text x="93.5102%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (2 samples, 0.31%)</title><rect x="93.2602%" y="213" width="0.3135%" height="15" fill="rgb(210,56,17)"/><text x="93.5102%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (2 samples, 0.31%)</title><rect x="93.5737%" y="229" width="0.3135%" height="15" fill="rgb(224,130,29)"/><text x="93.8237%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::ctrl (1 samples, 0.16%)</title><rect x="93.7304%" y="213" width="0.1567%" height="15" fill="rgb(235,212,8)"/><text x="93.9804%" y="223.50"></text></g><g><title>__GI_munmap (1 samples, 0.16%)</title><rect x="93.8871%" y="101" width="0.1567%" height="15" fill="rgb(223,33,50)"/><text x="94.1371%" y="111.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.31%)</title><rect x="93.8871%" y="181" width="0.3135%" height="15" fill="rgb(219,149,13)"/><text x="94.1371%" y="191.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.31%)</title><rect x="93.8871%" y="165" width="0.3135%" height="15" fill="rgb(250,156,29)"/><text x="94.1371%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize::{{closure}} (2 samples, 0.31%)</title><rect x="93.8871%" y="149" width="0.3135%" height="15" fill="rgb(216,193,19)"/><text x="94.1371%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (2 samples, 0.31%)</title><rect x="93.8871%" y="133" width="0.3135%" height="15" fill="rgb(216,135,14)"/><text x="94.1371%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.31%)</title><rect x="93.8871%" y="117" width="0.3135%" height="15" fill="rgb(241,47,5)"/><text x="94.1371%" y="127.50"></text></g><g><title>_int_free (1 samples, 0.16%)</title><rect x="94.0439%" y="101" width="0.1567%" height="15" fill="rgb(233,42,35)"/><text x="94.2939%" y="111.50"></text></g><g><title>systrim.constprop.0 (1 samples, 0.16%)</title><rect x="94.0439%" y="85" width="0.1567%" height="15" fill="rgb(231,13,6)"/><text x="94.2939%" y="95.50"></text></g><g><title>__GI___default_morecore (1 samples, 0.16%)</title><rect x="94.0439%" y="69" width="0.1567%" height="15" fill="rgb(207,181,40)"/><text x="94.2939%" y="79.50"></text></g><g><title>__GI___sbrk (1 samples, 0.16%)</title><rect x="94.0439%" y="53" width="0.1567%" height="15" fill="rgb(254,173,49)"/><text x="94.2939%" y="63.50"></text></g><g><title>__brk (1 samples, 0.16%)</title><rect x="94.0439%" y="37" width="0.1567%" height="15" fill="rgb(221,1,38)"/><text x="94.2939%" y="47.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.47%)</title><rect x="94.2006%" y="149" width="0.4702%" height="15" fill="rgb(206,124,46)"/><text x="94.4506%" y="159.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.16%)</title><rect x="94.5141%" y="133" width="0.1567%" height="15" fill="rgb(249,21,11)"/><text x="94.7641%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.16%)</title><rect x="94.5141%" y="117" width="0.1567%" height="15" fill="rgb(222,201,40)"/><text x="94.7641%" y="127.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.16%)</title><rect x="94.5141%" y="101" width="0.1567%" height="15" fill="rgb(235,61,29)"/><text x="94.7641%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.31%)</title><rect x="95.1411%" y="85" width="0.3135%" height="15" fill="rgb(219,207,3)"/><text x="95.3911%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.16%)</title><rect x="95.2978%" y="69" width="0.1567%" height="15" fill="rgb(222,56,46)"/><text x="95.5478%" y="79.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert::{{closure}} (9 samples, 1.41%)</title><rect x="94.2006%" y="181" width="1.4107%" height="15" fill="rgb(239,76,54)"/><text x="94.4506%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 1.41%)</title><rect x="94.2006%" y="165" width="1.4107%" height="15" fill="rgb(231,124,27)"/><text x="94.4506%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (6 samples, 0.94%)</title><rect x="94.6708%" y="149" width="0.9404%" height="15" fill="rgb(249,195,6)"/><text x="94.9208%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.47%)</title><rect x="95.1411%" y="133" width="0.4702%" height="15" fill="rgb(237,174,47)"/><text x="95.3911%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.47%)</title><rect x="95.1411%" y="117" width="0.4702%" height="15" fill="rgb(206,201,31)"/><text x="95.3911%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.47%)</title><rect x="95.1411%" y="101" width="0.4702%" height="15" fill="rgb(231,57,52)"/><text x="95.3911%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.16%)</title><rect x="95.4545%" y="85" width="0.1567%" height="15" fill="rgb(248,177,22)"/><text x="95.7045%" y="95.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (15 samples, 2.35%)</title><rect x="95.6113%" y="181" width="2.3511%" height="15" fill="rgb(215,211,37)"/><text x="95.8613%" y="191.50">h..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (15 samples, 2.35%)</title><rect x="95.6113%" y="165" width="2.3511%" height="15" fill="rgb(241,128,51)"/><text x="95.8613%" y="175.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 2.35%)</title><rect x="95.6113%" y="149" width="2.3511%" height="15" fill="rgb(227,165,31)"/><text x="95.8613%" y="159.50">c..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::bucket (1 samples, 0.16%)</title><rect x="97.9624%" y="181" width="0.1567%" height="15" fill="rgb(228,167,24)"/><text x="98.2124%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.16%)</title><rect x="97.9624%" y="165" width="0.1567%" height="15" fill="rgb(228,143,12)"/><text x="98.2124%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.16%)</title><rect x="97.9624%" y="149" width="0.1567%" height="15" fill="rgb(249,149,8)"/><text x="98.2124%" y="159.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (1 samples, 0.16%)</title><rect x="97.9624%" y="133" width="0.1567%" height="15" fill="rgb(243,35,44)"/><text x="98.2124%" y="143.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (1 samples, 0.16%)</title><rect x="97.9624%" y="117" width="0.1567%" height="15" fill="rgb(246,89,9)"/><text x="98.2124%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (1 samples, 0.16%)</title><rect x="98.1191%" y="181" width="0.1567%" height="15" fill="rgb(233,213,13)"/><text x="98.3691%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new_uninitialized (1 samples, 0.16%)</title><rect x="98.1191%" y="165" width="0.1567%" height="15" fill="rgb(233,141,41)"/><text x="98.3691%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.16%)</title><rect x="98.1191%" y="149" width="0.1567%" height="15" fill="rgb(239,167,4)"/><text x="98.3691%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.16%)</title><rect x="98.1191%" y="133" width="0.1567%" height="15" fill="rgb(209,217,16)"/><text x="98.3691%" y="143.50"></text></g><g><title>_int_malloc (1 samples, 0.16%)</title><rect x="98.1191%" y="117" width="0.1567%" height="15" fill="rgb(219,88,35)"/><text x="98.3691%" y="127.50"></text></g><g><title>sysmalloc (1 samples, 0.16%)</title><rect x="98.1191%" y="101" width="0.1567%" height="15" fill="rgb(220,193,23)"/><text x="98.3691%" y="111.50"></text></g><g><title>std::panic::catch_unwind (536 samples, 84.01%)</title><rect x="14.4201%" y="421" width="84.0125%" height="15" fill="rgb(230,90,52)"/><text x="14.6701%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (536 samples, 84.01%)</title><rect x="14.4201%" y="405" width="84.0125%" height="15" fill="rgb(252,106,19)"/><text x="14.6701%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (536 samples, 84.01%)</title><rect x="14.4201%" y="389" width="84.0125%" height="15" fill="rgb(206,74,20)"/><text x="14.6701%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (536 samples, 84.01%)</title><rect x="14.4201%" y="373" width="84.0125%" height="15" fill="rgb(230,138,44)"/><text x="14.6701%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (536 samples, 84.01%)</title><rect x="14.4201%" y="357" width="84.0125%" height="15" fill="rgb(235,182,43)"/><text x="14.6701%" y="367.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (536 samples, 84.01%)</title><rect x="14.4201%" y="341" width="84.0125%" height="15" fill="rgb(242,16,51)"/><text x="14.6701%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (536 samples, 84.01%)</title><rect x="14.4201%" y="325" width="84.0125%" height="15" fill="rgb(248,9,4)"/><text x="14.6701%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>day15::main (536 samples, 84.01%)</title><rect x="14.4201%" y="309" width="84.0125%" height="15" fill="rgb(210,31,22)"/><text x="14.6701%" y="319.50">day15::main</text></g><g><title>day15::solve (536 samples, 84.01%)</title><rect x="14.4201%" y="293" width="84.0125%" height="15" fill="rgb(239,54,39)"/><text x="14.6701%" y="303.50">day15::solve</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (47 samples, 7.37%)</title><rect x="91.0658%" y="277" width="7.3668%" height="15" fill="rgb(230,99,41)"/><text x="91.3158%" y="287.50">std::colle..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::insert (46 samples, 7.21%)</title><rect x="91.2226%" y="261" width="7.2100%" height="15" fill="rgb(253,106,12)"/><text x="91.4726%" y="271.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert (31 samples, 4.86%)</title><rect x="93.5737%" y="245" width="4.8589%" height="15" fill="rgb(213,46,41)"/><text x="93.8237%" y="255.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (29 samples, 4.55%)</title><rect x="93.8871%" y="229" width="4.5455%" height="15" fill="rgb(215,133,35)"/><text x="94.1371%" y="239.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (29 samples, 4.55%)</title><rect x="93.8871%" y="213" width="4.5455%" height="15" fill="rgb(213,28,5)"/><text x="94.1371%" y="223.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (29 samples, 4.55%)</title><rect x="93.8871%" y="197" width="4.5455%" height="15" fill="rgb(215,77,49)"/><text x="94.1371%" y="207.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (1 samples, 0.16%)</title><rect x="98.2759%" y="181" width="0.1567%" height="15" fill="rgb(248,100,22)"/><text x="98.5259%" y="191.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.16%)</title><rect x="98.2759%" y="165" width="0.1567%" height="15" fill="rgb(208,67,9)"/><text x="98.5259%" y="175.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::init (1 samples, 0.16%)</title><rect x="98.4326%" y="421" width="0.1567%" height="15" fill="rgb(219,133,21)"/><text x="98.6826%" y="431.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.16%)</title><rect x="98.4326%" y="405" width="0.1567%" height="15" fill="rgb(246,46,29)"/><text x="98.6826%" y="415.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.16%)</title><rect x="98.4326%" y="389" width="0.1567%" height="15" fill="rgb(246,185,52)"/><text x="98.6826%" y="399.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.16%)</title><rect x="98.4326%" y="373" width="0.1567%" height="15" fill="rgb(252,136,11)"/><text x="98.6826%" y="383.50"></text></g><g><title>__GI___mprotect (1 samples, 0.16%)</title><rect x="98.4326%" y="357" width="0.1567%" height="15" fill="rgb(219,138,53)"/><text x="98.6826%" y="367.50"></text></g><g><title>__libc_start_main (538 samples, 84.33%)</title><rect x="14.4201%" y="469" width="84.3260%" height="15" fill="rgb(211,51,23)"/><text x="14.6701%" y="479.50">__libc_start_main</text></g><g><title>main (538 samples, 84.33%)</title><rect x="14.4201%" y="453" width="84.3260%" height="15" fill="rgb(247,221,28)"/><text x="14.6701%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal (538 samples, 84.33%)</title><rect x="14.4201%" y="437" width="84.3260%" height="15" fill="rgb(251,222,45)"/><text x="14.6701%" y="447.50">std::rt::lang_start_internal</text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.16%)</title><rect x="98.5893%" y="421" width="0.1567%" height="15" fill="rgb(217,162,53)"/><text x="98.8393%" y="431.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.16%)</title><rect x="98.5893%" y="405" width="0.1567%" height="15" fill="rgb(229,93,14)"/><text x="98.8393%" y="415.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.16%)</title><rect x="98.5893%" y="389" width="0.1567%" height="15" fill="rgb(209,67,49)"/><text x="98.8393%" y="399.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.16%)</title><rect x="98.5893%" y="373" width="0.1567%" height="15" fill="rgb(213,87,29)"/><text x="98.8393%" y="383.50"></text></g><g><title>__fopen_internal (1 samples, 0.16%)</title><rect x="98.5893%" y="357" width="0.1567%" height="15" fill="rgb(205,151,52)"/><text x="98.8393%" y="367.50"></text></g><g><title>malloc_hook_ini (1 samples, 0.16%)</title><rect x="98.5893%" y="341" width="0.1567%" height="15" fill="rgb(253,215,39)"/><text x="98.8393%" y="351.50"></text></g><g><title>ptmalloc_init.part.0 (1 samples, 0.16%)</title><rect x="98.5893%" y="325" width="0.1567%" height="15" fill="rgb(221,220,41)"/><text x="98.8393%" y="335.50"></text></g><g><title>__GI__dl_addr (1 samples, 0.16%)</title><rect x="98.5893%" y="309" width="0.1567%" height="15" fill="rgb(218,133,21)"/><text x="98.8393%" y="319.50"></text></g><g><title>__mmap (2 samples, 0.31%)</title><rect x="99.3730%" y="341" width="0.3135%" height="15" fill="rgb(221,193,43)"/><text x="99.6230%" y="351.50"></text></g><g><title>_dl_map_object_deps (3 samples, 0.47%)</title><rect x="99.3730%" y="421" width="0.4702%" height="15" fill="rgb(240,128,52)"/><text x="99.6230%" y="431.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.47%)</title><rect x="99.3730%" y="405" width="0.4702%" height="15" fill="rgb(253,114,12)"/><text x="99.6230%" y="415.50"></text></g><g><title>openaux (3 samples, 0.47%)</title><rect x="99.3730%" y="389" width="0.4702%" height="15" fill="rgb(215,223,47)"/><text x="99.6230%" y="399.50"></text></g><g><title>_dl_map_object (3 samples, 0.47%)</title><rect x="99.3730%" y="373" width="0.4702%" height="15" fill="rgb(248,225,23)"/><text x="99.6230%" y="383.50"></text></g><g><title>_dl_map_object_from_fd (3 samples, 0.47%)</title><rect x="99.3730%" y="357" width="0.4702%" height="15" fill="rgb(250,108,0)"/><text x="99.6230%" y="367.50"></text></g><g><title>_dl_new_object (1 samples, 0.16%)</title><rect x="99.6865%" y="341" width="0.1567%" height="15" fill="rgb(228,208,7)"/><text x="99.9365%" y="351.50"></text></g><g><title>rtld_malloc (1 samples, 0.16%)</title><rect x="99.6865%" y="325" width="0.1567%" height="15" fill="rgb(244,45,10)"/><text x="99.9365%" y="335.50"></text></g><g><title>__mmap (1 samples, 0.16%)</title><rect x="99.6865%" y="309" width="0.1567%" height="15" fill="rgb(207,125,25)"/><text x="99.9365%" y="319.50"></text></g><g><title>all (638 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(210,195,18)"/><text x="0.2500%" y="527.50"></text></g><g><title>day15 (638 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(249,80,12)"/><text x="0.2500%" y="511.50">day15</text></g><g><title>_start (562 samples, 88.09%)</title><rect x="11.9122%" y="485" width="88.0878%" height="15" fill="rgb(221,65,9)"/><text x="12.1622%" y="495.50">_start</text></g><g><title>_dl_start (8 samples, 1.25%)</title><rect x="98.7461%" y="469" width="1.2539%" height="15" fill="rgb(235,49,36)"/><text x="98.9961%" y="479.50"></text></g><g><title>_dl_sysdep_start (6 samples, 0.94%)</title><rect x="99.0596%" y="453" width="0.9404%" height="15" fill="rgb(225,32,20)"/><text x="99.3096%" y="463.50"></text></g><g><title>dl_main (5 samples, 0.78%)</title><rect x="99.2163%" y="437" width="0.7837%" height="15" fill="rgb(215,141,46)"/><text x="99.4663%" y="447.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.16%)</title><rect x="99.8433%" y="421" width="0.1567%" height="15" fill="rgb(250,160,47)"/><text x="100.0933%" y="431.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.16%)</title><rect x="99.8433%" y="405" width="0.1567%" height="15" fill="rgb(216,222,40)"/><text x="100.0933%" y="415.50"></text></g><g><title>do_lookup_x (1 samples, 0.16%)</title><rect x="99.8433%" y="389" width="0.1567%" height="15" fill="rgb(234,217,39)"/><text x="100.0933%" y="399.50"></text></g></svg></svg>