<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 1.12%)</title><rect x="0.0000%" y="453" width="1.1204%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="463.50"></text></g><g><title>day15::solve (1 samples, 0.28%)</title><rect x="1.1204%" y="453" width="0.2801%" height="15" fill="rgb(217,0,24)"/><text x="1.3704%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.28%)</title><rect x="1.1204%" y="437" width="0.2801%" height="15" fill="rgb(221,193,54)"/><text x="1.3704%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.28%)</title><rect x="1.1204%" y="421" width="0.2801%" height="15" fill="rgb(248,212,6)"/><text x="1.3704%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (1 samples, 0.28%)</title><rect x="1.1204%" y="405" width="0.2801%" height="15" fill="rgb(208,68,35)"/><text x="1.3704%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.28%)</title><rect x="1.1204%" y="389" width="0.2801%" height="15" fill="rgb(232,128,0)"/><text x="1.3704%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (2 samples, 0.56%)</title><rect x="1.4006%" y="453" width="0.5602%" height="15" fill="rgb(207,160,47)"/><text x="1.6506%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (2 samples, 0.56%)</title><rect x="1.4006%" y="437" width="0.5602%" height="15" fill="rgb(228,23,34)"/><text x="1.6506%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::reserve::{{closure}} (2 samples, 0.56%)</title><rect x="1.4006%" y="421" width="0.5602%" height="15" fill="rgb(218,30,26)"/><text x="1.6506%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.56%)</title><rect x="1.4006%" y="405" width="0.5602%" height="15" fill="rgb(220,122,19)"/><text x="1.6506%" y="415.50"></text></g><g><title>[unknown] (20 samples, 5.60%)</title><rect x="0.0000%" y="469" width="5.6022%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="479.50">[unknow..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (13 samples, 3.64%)</title><rect x="1.9608%" y="453" width="3.6415%" height="15" fill="rgb(240,193,28)"/><text x="2.2108%" y="463.50">hash..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.56%)</title><rect x="5.0420%" y="437" width="0.5602%" height="15" fill="rgb(216,20,37)"/><text x="5.2920%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.28%)</title><rect x="10.0840%" y="245" width="0.2801%" height="15" fill="rgb(206,188,39)"/><text x="10.3340%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next (3 samples, 0.84%)</title><rect x="10.0840%" y="261" width="0.8403%" height="15" fill="rgb(217,207,13)"/><text x="10.3340%" y="271.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::is_empty (2 samples, 0.56%)</title><rect x="10.3641%" y="245" width="0.5602%" height="15" fill="rgb(231,73,38)"/><text x="10.6141%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="10.9244%" y="261" width="0.2801%" height="15" fill="rgb(225,20,46)"/><text x="11.1744%" y="271.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="10.9244%" y="245" width="0.2801%" height="15" fill="rgb(210,31,41)"/><text x="11.1744%" y="255.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="10.9244%" y="229" width="0.2801%" height="15" fill="rgb(221,200,47)"/><text x="11.1744%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.28%)</title><rect x="10.9244%" y="213" width="0.2801%" height="15" fill="rgb(226,26,5)"/><text x="11.1744%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (1 samples, 0.28%)</title><rect x="10.9244%" y="197" width="0.2801%" height="15" fill="rgb(249,33,26)"/><text x="11.1744%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.28%)</title><rect x="10.9244%" y="181" width="0.2801%" height="15" fill="rgb(235,183,28)"/><text x="11.1744%" y="191.50"></text></g><g><title>__GI_munmap (1 samples, 0.28%)</title><rect x="10.9244%" y="165" width="0.2801%" height="15" fill="rgb(221,5,38)"/><text x="11.1744%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.84%)</title><rect x="11.2045%" y="197" width="0.8403%" height="15" fill="rgb(247,18,42)"/><text x="11.4545%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (3 samples, 0.84%)</title><rect x="11.2045%" y="181" width="0.8403%" height="15" fill="rgb(241,131,45)"/><text x="11.4545%" y="191.50"></text></g><g><title>core::ptr::write (3 samples, 0.84%)</title><rect x="11.2045%" y="165" width="0.8403%" height="15" fill="rgb(249,31,29)"/><text x="11.4545%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (2 samples, 0.56%)</title><rect x="12.6050%" y="181" width="0.5602%" height="15" fill="rgb(225,111,53)"/><text x="12.8550%" y="191.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (8 samples, 2.24%)</title><rect x="11.2045%" y="261" width="2.2409%" height="15" fill="rgb(238,160,17)"/><text x="11.4545%" y="271.50">s..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (8 samples, 2.24%)</title><rect x="11.2045%" y="245" width="2.2409%" height="15" fill="rgb(214,148,48)"/><text x="11.4545%" y="255.50">s..</text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V&gt;::insert (8 samples, 2.24%)</title><rect x="11.2045%" y="229" width="2.2409%" height="15" fill="rgb(232,36,49)"/><text x="11.4545%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::insert_no_grow (8 samples, 2.24%)</title><rect x="11.2045%" y="213" width="2.2409%" height="15" fill="rgb(209,103,24)"/><text x="11.4545%" y="223.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (5 samples, 1.40%)</title><rect x="12.0448%" y="197" width="1.4006%" height="15" fill="rgb(229,88,8)"/><text x="12.2948%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.28%)</title><rect x="13.1653%" y="181" width="0.2801%" height="15" fill="rgb(213,181,19)"/><text x="13.4153%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.28%)</title><rect x="13.1653%" y="165" width="0.2801%" height="15" fill="rgb(254,191,54)"/><text x="13.4153%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.84%)</title><rect x="14.8459%" y="165" width="0.8403%" height="15" fill="rgb(241,83,37)"/><text x="15.0959%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="15.4062%" y="149" width="0.2801%" height="15" fill="rgb(233,36,39)"/><text x="15.6562%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.28%)</title><rect x="15.4062%" y="133" width="0.2801%" height="15" fill="rgb(226,3,54)"/><text x="15.6562%" y="143.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.28%)</title><rect x="15.6863%" y="165" width="0.2801%" height="15" fill="rgb(245,192,40)"/><text x="15.9363%" y="175.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.28%)</title><rect x="15.6863%" y="149" width="0.2801%" height="15" fill="rgb(238,167,29)"/><text x="15.9363%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize::{{closure}} (1 samples, 0.28%)</title><rect x="15.6863%" y="133" width="0.2801%" height="15" fill="rgb(232,182,51)"/><text x="15.9363%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (1 samples, 0.28%)</title><rect x="15.6863%" y="117" width="0.2801%" height="15" fill="rgb(231,60,39)"/><text x="15.9363%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.28%)</title><rect x="15.6863%" y="101" width="0.2801%" height="15" fill="rgb(208,69,12)"/><text x="15.9363%" y="111.50"></text></g><g><title>__GI_munmap (1 samples, 0.28%)</title><rect x="15.6863%" y="85" width="0.2801%" height="15" fill="rgb(235,93,37)"/><text x="15.9363%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 1.12%)</title><rect x="16.2465%" y="85" width="1.1204%" height="15" fill="rgb(213,116,39)"/><text x="16.4965%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.56%)</title><rect x="16.8067%" y="69" width="0.5602%" height="15" fill="rgb(222,207,29)"/><text x="17.0567%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.84%)</title><rect x="18.2073%" y="69" width="0.8403%" height="15" fill="rgb(206,96,30)"/><text x="18.4573%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 3.36%)</title><rect x="15.9664%" y="133" width="3.3613%" height="15" fill="rgb(218,138,4)"/><text x="16.2164%" y="143.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 3.36%)</title><rect x="15.9664%" y="117" width="3.3613%" height="15" fill="rgb(250,191,14)"/><text x="16.2164%" y="127.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 3.36%)</title><rect x="15.9664%" y="101" width="3.3613%" height="15" fill="rgb(239,60,40)"/><text x="16.2164%" y="111.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 1.96%)</title><rect x="17.3669%" y="85" width="1.9608%" height="15" fill="rgb(206,27,48)"/><text x="17.6169%" y="95.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.28%)</title><rect x="19.0476%" y="69" width="0.2801%" height="15" fill="rgb(225,35,8)"/><text x="19.2976%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (8 samples, 2.24%)</title><rect x="19.3277%" y="133" width="2.2409%" height="15" fill="rgb(250,213,24)"/><text x="19.5777%" y="143.50">&lt;..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 1.12%)</title><rect x="20.4482%" y="117" width="1.1204%" height="15" fill="rgb(247,123,22)"/><text x="20.6982%" y="127.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 1.12%)</title><rect x="20.4482%" y="101" width="1.1204%" height="15" fill="rgb(231,138,38)"/><text x="20.6982%" y="111.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 1.12%)</title><rect x="20.4482%" y="85" width="1.1204%" height="15" fill="rgb(231,145,46)"/><text x="20.6982%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.28%)</title><rect x="23.2493%" y="37" width="0.2801%" height="15" fill="rgb(251,118,11)"/><text x="23.4993%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 1.68%)</title><rect x="22.6891%" y="53" width="1.6807%" height="15" fill="rgb(217,147,25)"/><text x="22.9391%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.84%)</title><rect x="23.5294%" y="37" width="0.8403%" height="15" fill="rgb(247,81,37)"/><text x="23.7794%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 3.08%)</title><rect x="21.8487%" y="69" width="3.0812%" height="15" fill="rgb(209,12,38)"/><text x="22.0987%" y="79.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.56%)</title><rect x="24.3697%" y="53" width="0.5602%" height="15" fill="rgb(227,1,9)"/><text x="24.6197%" y="63.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::reserve::{{closure}} (33 samples, 9.24%)</title><rect x="15.9664%" y="165" width="9.2437%" height="15" fill="rgb(248,47,43)"/><text x="16.2164%" y="175.50">hashbrown::ma..</text></g><g><title>hashbrown::map::make_hash (33 samples, 9.24%)</title><rect x="15.9664%" y="149" width="9.2437%" height="15" fill="rgb(221,10,30)"/><text x="16.2164%" y="159.50">hashbrown::ma..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (13 samples, 3.64%)</title><rect x="21.5686%" y="133" width="3.6415%" height="15" fill="rgb(210,229,1)"/><text x="21.8186%" y="143.50">core..</text></g><g><title>core::hash::Hasher::write_usize (12 samples, 3.36%)</title><rect x="21.8487%" y="117" width="3.3613%" height="15" fill="rgb(222,148,37)"/><text x="22.0987%" y="127.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 3.36%)</title><rect x="21.8487%" y="101" width="3.3613%" height="15" fill="rgb(234,67,33)"/><text x="22.0987%" y="111.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12 samples, 3.36%)</title><rect x="21.8487%" y="85" width="3.3613%" height="15" fill="rgb(247,98,35)"/><text x="22.0987%" y="95.50">&lt;co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.28%)</title><rect x="24.9300%" y="69" width="0.2801%" height="15" fill="rgb(247,138,52)"/><text x="25.1800%" y="79.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (26 samples, 7.28%)</title><rect x="25.2101%" y="165" width="7.2829%" height="15" fill="rgb(213,79,30)"/><text x="25.4601%" y="175.50">hashbrown:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (26 samples, 7.28%)</title><rect x="25.2101%" y="149" width="7.2829%" height="15" fill="rgb(246,177,23)"/><text x="25.4601%" y="159.50">core::ptr:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 7.28%)</title><rect x="25.2101%" y="133" width="7.2829%" height="15" fill="rgb(230,62,27)"/><text x="25.4601%" y="143.50">core::intr..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::fallible_with_capacity (1 samples, 0.28%)</title><rect x="32.4930%" y="165" width="0.2801%" height="15" fill="rgb(216,154,8)"/><text x="32.7430%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.28%)</title><rect x="32.4930%" y="149" width="0.2801%" height="15" fill="rgb(244,35,45)"/><text x="32.7430%" y="159.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.28%)</title><rect x="32.4930%" y="133" width="0.2801%" height="15" fill="rgb(251,115,12)"/><text x="32.7430%" y="143.50"></text></g><g><title>__memset_erms (1 samples, 0.28%)</title><rect x="32.4930%" y="117" width="0.2801%" height="15" fill="rgb(240,54,50)"/><text x="32.7430%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find_insert_slot (1 samples, 0.28%)</title><rect x="32.7731%" y="165" width="0.2801%" height="15" fill="rgb(233,84,52)"/><text x="33.0231%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::reserve (68 samples, 19.05%)</title><rect x="14.2857%" y="229" width="19.0476%" height="15" fill="rgb(207,117,47)"/><text x="14.5357%" y="239.50">hashbrown::map::HashMap&lt;K,V,S&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve (68 samples, 19.05%)</title><rect x="14.2857%" y="213" width="19.0476%" height="15" fill="rgb(249,43,39)"/><text x="14.5357%" y="223.50">hashbrown::raw::RawTable&lt;T&gt;::r..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (66 samples, 18.49%)</title><rect x="14.8459%" y="197" width="18.4874%" height="15" fill="rgb(209,38,44)"/><text x="15.0959%" y="207.50">hashbrown::raw::RawTable&lt;T&gt;::..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::resize (66 samples, 18.49%)</title><rect x="14.8459%" y="181" width="18.4874%" height="15" fill="rgb(236,212,23)"/><text x="15.0959%" y="191.50">hashbrown::raw::RawTable&lt;T&gt;::..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::set_ctrl (1 samples, 0.28%)</title><rect x="33.0532%" y="165" width="0.2801%" height="15" fill="rgb(242,79,21)"/><text x="33.3032%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.84%)</title><rect x="35.0140%" y="149" width="0.8403%" height="15" fill="rgb(211,96,35)"/><text x="35.2640%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 1.68%)</title><rect x="34.4538%" y="165" width="1.6807%" height="15" fill="rgb(253,215,40)"/><text x="34.7038%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.28%)</title><rect x="35.8543%" y="149" width="0.2801%" height="15" fill="rgb(211,81,21)"/><text x="36.1043%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 1.12%)</title><rect x="37.2549%" y="149" width="1.1204%" height="15" fill="rgb(208,190,38)"/><text x="37.5049%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (22 samples, 6.16%)</title><rect x="33.3333%" y="213" width="6.1625%" height="15" fill="rgb(235,213,38)"/><text x="33.5833%" y="223.50">&lt;std::co..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (22 samples, 6.16%)</title><rect x="33.3333%" y="197" width="6.1625%" height="15" fill="rgb(237,122,38)"/><text x="33.5833%" y="207.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (22 samples, 6.16%)</title><rect x="33.3333%" y="181" width="6.1625%" height="15" fill="rgb(244,218,35)"/><text x="33.5833%" y="191.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 3.36%)</title><rect x="36.1345%" y="165" width="3.3613%" height="15" fill="rgb(240,68,47)"/><text x="36.3845%" y="175.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 1.12%)</title><rect x="38.3754%" y="149" width="1.1204%" height="15" fill="rgb(210,16,53)"/><text x="38.6254%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 3.08%)</title><rect x="43.9776%" y="165" width="3.0812%" height="15" fill="rgb(235,124,12)"/><text x="44.2276%" y="175.50">cor..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (29 samples, 8.12%)</title><rect x="39.4958%" y="213" width="8.1232%" height="15" fill="rgb(224,169,11)"/><text x="39.7458%" y="223.50">&lt;std::colle..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (13 samples, 3.64%)</title><rect x="43.9776%" y="197" width="3.6415%" height="15" fill="rgb(250,166,2)"/><text x="44.2276%" y="207.50">core..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (13 samples, 3.64%)</title><rect x="43.9776%" y="181" width="3.6415%" height="15" fill="rgb(242,216,29)"/><text x="44.2276%" y="191.50">core..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (2 samples, 0.56%)</title><rect x="47.0588%" y="165" width="0.5602%" height="15" fill="rgb(230,116,27)"/><text x="47.3088%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 1.12%)</title><rect x="51.8207%" y="117" width="1.1204%" height="15" fill="rgb(228,99,48)"/><text x="52.0707%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 3.08%)</title><rect x="50.1401%" y="133" width="3.0812%" height="15" fill="rgb(253,11,6)"/><text x="50.3901%" y="143.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.28%)</title><rect x="52.9412%" y="117" width="0.2801%" height="15" fill="rgb(247,143,39)"/><text x="53.1912%" y="127.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.56%)</title><rect x="53.2213%" y="133" width="0.5602%" height="15" fill="rgb(236,97,10)"/><text x="53.4713%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 6.44%)</title><rect x="49.0196%" y="149" width="6.4426%" height="15" fill="rgb(233,208,19)"/><text x="49.2696%" y="159.50">&lt;core::h..</text></g><g><title>core::hash::sip::u8to64_le (6 samples, 1.68%)</title><rect x="53.7815%" y="133" width="1.6807%" height="15" fill="rgb(216,164,2)"/><text x="54.0315%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (85 samples, 23.81%)</title><rect x="33.3333%" y="229" width="23.8095%" height="15" fill="rgb(220,129,5)"/><text x="33.5833%" y="239.50">hashbrown::map::make_hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (34 samples, 9.52%)</title><rect x="47.6190%" y="213" width="9.5238%" height="15" fill="rgb(242,17,10)"/><text x="47.8690%" y="223.50">core::hash::im..</text></g><g><title>core::hash::Hasher::write_usize (31 samples, 8.68%)</title><rect x="48.4594%" y="197" width="8.6835%" height="15" fill="rgb(242,107,0)"/><text x="48.7094%" y="207.50">core::hash::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 8.12%)</title><rect x="49.0196%" y="181" width="8.1232%" height="15" fill="rgb(251,28,31)"/><text x="49.2696%" y="191.50">&lt;std::colle..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (29 samples, 8.12%)</title><rect x="49.0196%" y="165" width="8.1232%" height="15" fill="rgb(233,223,10)"/><text x="49.2696%" y="175.50">&lt;core::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (6 samples, 1.68%)</title><rect x="55.4622%" y="149" width="1.6807%" height="15" fill="rgb(215,21,27)"/><text x="55.7122%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.28%)</title><rect x="58.8235%" y="197" width="0.2801%" height="15" fill="rgb(232,23,21)"/><text x="59.0735%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.40%)</title><rect x="59.1036%" y="197" width="1.4006%" height="15" fill="rgb(244,5,23)"/><text x="59.3536%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 1.40%)</title><rect x="59.1036%" y="181" width="1.4006%" height="15" fill="rgb(226,81,46)"/><text x="59.3536%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 3.08%)</title><rect x="58.5434%" y="213" width="3.0812%" height="15" fill="rgb(247,70,30)"/><text x="58.7934%" y="223.50">&lt;ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (4 samples, 1.12%)</title><rect x="60.5042%" y="197" width="1.1204%" height="15" fill="rgb(212,68,19)"/><text x="60.7542%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::ProbeSeq as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.56%)</title><rect x="61.6246%" y="181" width="0.5602%" height="15" fill="rgb(240,187,13)"/><text x="61.8746%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::probe_seq (1 samples, 0.28%)</title><rect x="62.1849%" y="181" width="0.2801%" height="15" fill="rgb(223,113,26)"/><text x="62.4349%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.28%)</title><rect x="62.4650%" y="181" width="0.2801%" height="15" fill="rgb(206,192,2)"/><text x="62.7150%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 1.40%)</title><rect x="62.7451%" y="181" width="1.4006%" height="15" fill="rgb(241,108,4)"/><text x="62.9951%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 1.40%)</title><rect x="62.7451%" y="165" width="1.4006%" height="15" fill="rgb(247,173,49)"/><text x="62.9951%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 1.40%)</title><rect x="62.7451%" y="149" width="1.4006%" height="15" fill="rgb(224,114,35)"/><text x="62.9951%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (13 samples, 3.64%)</title><rect x="61.6246%" y="213" width="3.6415%" height="15" fill="rgb(245,159,27)"/><text x="61.8746%" y="223.50">hash..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (13 samples, 3.64%)</title><rect x="61.6246%" y="197" width="3.6415%" height="15" fill="rgb(245,172,44)"/><text x="61.8746%" y="207.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 1.12%)</title><rect x="64.1457%" y="181" width="1.1204%" height="15" fill="rgb(236,23,11)"/><text x="64.3957%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (4 samples, 1.12%)</title><rect x="64.1457%" y="165" width="1.1204%" height="15" fill="rgb(205,117,38)"/><text x="64.3957%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (4 samples, 1.12%)</title><rect x="64.1457%" y="149" width="1.1204%" height="15" fill="rgb(237,72,25)"/><text x="64.3957%" y="159.50"></text></g><g><title>core::core_arch::simd::i8x16::new (4 samples, 1.12%)</title><rect x="64.1457%" y="133" width="1.1204%" height="15" fill="rgb(244,70,9)"/><text x="64.3957%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (69 samples, 19.33%)</title><rect x="57.1429%" y="229" width="19.3277%" height="15" fill="rgb(217,125,39)"/><text x="57.3929%" y="239.50">hashbrown::raw::RawTable&lt;T&gt;::f..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry::{{closure}} (40 samples, 11.20%)</title><rect x="65.2661%" y="213" width="11.2045%" height="15" fill="rgb(235,36,10)"/><text x="65.5161%" y="223.50">hashbrown::rustc..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (40 samples, 11.20%)</title><rect x="65.2661%" y="197" width="11.2045%" height="15" fill="rgb(251,123,47)"/><text x="65.5161%" y="207.50">core::cmp::impls..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (225 samples, 63.03%)</title><rect x="13.7255%" y="245" width="63.0252%" height="15" fill="rgb(221,13,13)"/><text x="13.9755%" y="255.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (1 samples, 0.28%)</title><rect x="76.4706%" y="229" width="0.2801%" height="15" fill="rgb(238,131,9)"/><text x="76.7206%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (230 samples, 64.43%)</title><rect x="13.4454%" y="261" width="64.4258%" height="15" fill="rgb(211,50,8)"/><text x="13.6954%" y="271.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (4 samples, 1.12%)</title><rect x="76.7507%" y="245" width="1.1204%" height="15" fill="rgb(245,182,24)"/><text x="77.0007%" y="255.50"></text></g><g><title>day15::solve (2 samples, 0.56%)</title><rect x="77.8711%" y="213" width="0.5602%" height="15" fill="rgb(242,14,37)"/><text x="78.1211%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.84%)</title><rect x="79.8319%" y="149" width="0.8403%" height="15" fill="rgb(246,228,12)"/><text x="80.0819%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.56%)</title><rect x="80.1120%" y="133" width="0.5602%" height="15" fill="rgb(213,55,15)"/><text x="80.3620%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.84%)</title><rect x="81.2325%" y="133" width="0.8403%" height="15" fill="rgb(209,9,3)"/><text x="81.4825%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (15 samples, 4.20%)</title><rect x="78.9916%" y="197" width="4.2017%" height="15" fill="rgb(230,59,30)"/><text x="79.2416%" y="207.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (15 samples, 4.20%)</title><rect x="78.9916%" y="181" width="4.2017%" height="15" fill="rgb(209,121,21)"/><text x="79.2416%" y="191.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (15 samples, 4.20%)</title><rect x="78.9916%" y="165" width="4.2017%" height="15" fill="rgb(220,109,13)"/><text x="79.2416%" y="175.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 2.52%)</title><rect x="80.6723%" y="149" width="2.5210%" height="15" fill="rgb(232,18,1)"/><text x="80.9223%" y="159.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 1.12%)</title><rect x="82.0728%" y="133" width="1.1204%" height="15" fill="rgb(215,41,42)"/><text x="82.3228%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 2.80%)</title><rect x="83.1933%" y="197" width="2.8011%" height="15" fill="rgb(224,123,36)"/><text x="83.4433%" y="207.50">&lt;s..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.56%)</title><rect x="85.4342%" y="181" width="0.5602%" height="15" fill="rgb(240,125,3)"/><text x="85.6842%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.56%)</title><rect x="85.4342%" y="165" width="0.5602%" height="15" fill="rgb(205,98,50)"/><text x="85.6842%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.56%)</title><rect x="85.4342%" y="149" width="0.5602%" height="15" fill="rgb(205,185,37)"/><text x="85.6842%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 1.12%)</title><rect x="90.1961%" y="101" width="1.1204%" height="15" fill="rgb(238,207,15)"/><text x="90.4461%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 1.96%)</title><rect x="90.1961%" y="117" width="1.9608%" height="15" fill="rgb(213,199,42)"/><text x="90.4461%" y="127.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.84%)</title><rect x="91.3165%" y="101" width="0.8403%" height="15" fill="rgb(235,201,11)"/><text x="91.5665%" y="111.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (5 samples, 1.40%)</title><rect x="92.1569%" y="117" width="1.4006%" height="15" fill="rgb(207,46,11)"/><text x="92.4069%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 7.00%)</title><rect x="86.8347%" y="133" width="7.0028%" height="15" fill="rgb(241,35,35)"/><text x="87.0847%" y="143.50">&lt;core::ha..</text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.28%)</title><rect x="93.5574%" y="117" width="0.2801%" height="15" fill="rgb(243,32,47)"/><text x="93.8074%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (64 samples, 17.93%)</title><rect x="78.4314%" y="213" width="17.9272%" height="15" fill="rgb(247,202,23)"/><text x="78.6814%" y="223.50">hashbrown::map::make_hash</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (37 samples, 10.36%)</title><rect x="85.9944%" y="197" width="10.3641%" height="15" fill="rgb(219,102,11)"/><text x="86.2444%" y="207.50">core::hash::imp..</text></g><g><title>core::hash::Hasher::write_usize (35 samples, 9.80%)</title><rect x="86.5546%" y="181" width="9.8039%" height="15" fill="rgb(243,110,44)"/><text x="86.8046%" y="191.50">core::hash::Ha..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (34 samples, 9.52%)</title><rect x="86.8347%" y="165" width="9.5238%" height="15" fill="rgb(222,74,54)"/><text x="87.0847%" y="175.50">&lt;std::collecti..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (34 samples, 9.52%)</title><rect x="86.8347%" y="149" width="9.5238%" height="15" fill="rgb(216,99,12)"/><text x="87.0847%" y="159.50">&lt;core::hash::s..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (9 samples, 2.52%)</title><rect x="93.8375%" y="133" width="2.5210%" height="15" fill="rgb(226,22,26)"/><text x="94.0875%" y="143.50">co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value::{{closure}} (1 samples, 0.28%)</title><rect x="96.6387%" y="197" width="0.2801%" height="15" fill="rgb(217,163,10)"/><text x="96.8887%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (1 samples, 0.28%)</title><rect x="96.6387%" y="181" width="0.2801%" height="15" fill="rgb(213,25,53)"/><text x="96.8887%" y="191.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.28%)</title><rect x="96.9188%" y="165" width="0.2801%" height="15" fill="rgb(252,105,26)"/><text x="97.1688%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.28%)</title><rect x="97.1989%" y="165" width="0.2801%" height="15" fill="rgb(220,39,43)"/><text x="97.4489%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.28%)</title><rect x="97.1989%" y="149" width="0.2801%" height="15" fill="rgb(229,68,48)"/><text x="97.4489%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.28%)</title><rect x="97.1989%" y="133" width="0.2801%" height="15" fill="rgb(252,8,32)"/><text x="97.4489%" y="143.50"></text></g><g><title>std::panic::catch_unwind (320 samples, 89.64%)</title><rect x="8.1232%" y="405" width="89.6359%" height="15" fill="rgb(223,20,43)"/><text x="8.3732%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (320 samples, 89.64%)</title><rect x="8.1232%" y="389" width="89.6359%" height="15" fill="rgb(229,81,49)"/><text x="8.3732%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (320 samples, 89.64%)</title><rect x="8.1232%" y="373" width="89.6359%" height="15" fill="rgb(236,28,36)"/><text x="8.3732%" y="383.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (320 samples, 89.64%)</title><rect x="8.1232%" y="357" width="89.6359%" height="15" fill="rgb(249,185,26)"/><text x="8.3732%" y="367.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (320 samples, 89.64%)</title><rect x="8.1232%" y="341" width="89.6359%" height="15" fill="rgb(249,174,33)"/><text x="8.3732%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (320 samples, 89.64%)</title><rect x="8.1232%" y="325" width="89.6359%" height="15" fill="rgb(233,201,37)"/><text x="8.3732%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (320 samples, 89.64%)</title><rect x="8.1232%" y="309" width="89.6359%" height="15" fill="rgb(221,78,26)"/><text x="8.3732%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>day15::main (320 samples, 89.64%)</title><rect x="8.1232%" y="293" width="89.6359%" height="15" fill="rgb(250,127,30)"/><text x="8.3732%" y="303.50">day15::main</text></g><g><title>day15::solve (320 samples, 89.64%)</title><rect x="8.1232%" y="277" width="89.6359%" height="15" fill="rgb(230,49,44)"/><text x="8.3732%" y="287.50">day15::solve</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (71 samples, 19.89%)</title><rect x="77.8711%" y="261" width="19.8880%" height="15" fill="rgb(229,67,23)"/><text x="78.1211%" y="271.50">std::collections::hash::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get (71 samples, 19.89%)</title><rect x="77.8711%" y="245" width="19.8880%" height="15" fill="rgb(249,83,47)"/><text x="78.1211%" y="255.50">hashbrown::map::HashMap&lt;K,V,S&gt;:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::get_key_value (71 samples, 19.89%)</title><rect x="77.8711%" y="229" width="19.8880%" height="15" fill="rgb(215,43,3)"/><text x="78.1211%" y="239.50">hashbrown::map::HashMap&lt;K,V,S&gt;:..</text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::find (5 samples, 1.40%)</title><rect x="96.3585%" y="213" width="1.4006%" height="15" fill="rgb(238,154,13)"/><text x="96.6085%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::iter_hash (3 samples, 0.84%)</title><rect x="96.9188%" y="197" width="0.8403%" height="15" fill="rgb(219,56,2)"/><text x="97.1688%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T&gt;::new (3 samples, 0.84%)</title><rect x="96.9188%" y="181" width="0.8403%" height="15" fill="rgb(233,0,4)"/><text x="97.1688%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.28%)</title><rect x="97.4790%" y="165" width="0.2801%" height="15" fill="rgb(235,30,7)"/><text x="97.7290%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.28%)</title><rect x="97.4790%" y="149" width="0.2801%" height="15" fill="rgb(250,79,13)"/><text x="97.7290%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.28%)</title><rect x="97.4790%" y="133" width="0.2801%" height="15" fill="rgb(211,146,34)"/><text x="97.7290%" y="143.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.28%)</title><rect x="97.4790%" y="117" width="0.2801%" height="15" fill="rgb(228,22,38)"/><text x="97.7290%" y="127.50"></text></g><g><title>__libc_start_main (321 samples, 89.92%)</title><rect x="8.1232%" y="453" width="89.9160%" height="15" fill="rgb(235,168,5)"/><text x="8.3732%" y="463.50">__libc_start_main</text></g><g><title>main (321 samples, 89.92%)</title><rect x="8.1232%" y="437" width="89.9160%" height="15" fill="rgb(221,155,16)"/><text x="8.3732%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (321 samples, 89.92%)</title><rect x="8.1232%" y="421" width="89.9160%" height="15" fill="rgb(215,215,53)"/><text x="8.3732%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.28%)</title><rect x="97.7591%" y="405" width="0.2801%" height="15" fill="rgb(223,4,10)"/><text x="98.0091%" y="415.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.28%)</title><rect x="97.7591%" y="389" width="0.2801%" height="15" fill="rgb(234,103,6)"/><text x="98.0091%" y="399.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.28%)</title><rect x="97.7591%" y="373" width="0.2801%" height="15" fill="rgb(227,97,0)"/><text x="98.0091%" y="383.50"></text></g><g><title>__pthread_getattr_np (1 samples, 0.28%)</title><rect x="97.7591%" y="357" width="0.2801%" height="15" fill="rgb(234,150,53)"/><text x="98.0091%" y="367.50"></text></g><g><title>__pthread_getaffinity_np (1 samples, 0.28%)</title><rect x="97.7591%" y="341" width="0.2801%" height="15" fill="rgb(228,201,54)"/><text x="98.0091%" y="351.50"></text></g><g><title>__libc_early_init (1 samples, 0.28%)</title><rect x="98.3193%" y="405" width="0.2801%" height="15" fill="rgb(222,22,37)"/><text x="98.5693%" y="415.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.28%)</title><rect x="98.3193%" y="389" width="0.2801%" height="15" fill="rgb(237,53,32)"/><text x="98.5693%" y="399.50"></text></g><g><title>_start (334 samples, 93.56%)</title><rect x="5.6022%" y="469" width="93.5574%" height="15" fill="rgb(233,25,53)"/><text x="5.8522%" y="479.50">_start</text></g><g><title>_dl_start (4 samples, 1.12%)</title><rect x="98.0392%" y="453" width="1.1204%" height="15" fill="rgb(210,40,34)"/><text x="98.2892%" y="463.50"></text></g><g><title>_dl_sysdep_start (4 samples, 1.12%)</title><rect x="98.0392%" y="437" width="1.1204%" height="15" fill="rgb(241,220,44)"/><text x="98.2892%" y="447.50"></text></g><g><title>dl_main (3 samples, 0.84%)</title><rect x="98.3193%" y="421" width="0.8403%" height="15" fill="rgb(235,28,35)"/><text x="98.5693%" y="431.50"></text></g><g><title>_dl_map_object_deps (2 samples, 0.56%)</title><rect x="98.5994%" y="405" width="0.5602%" height="15" fill="rgb(210,56,17)"/><text x="98.8494%" y="415.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.56%)</title><rect x="98.5994%" y="389" width="0.5602%" height="15" fill="rgb(224,130,29)"/><text x="98.8494%" y="399.50"></text></g><g><title>openaux (2 samples, 0.56%)</title><rect x="98.5994%" y="373" width="0.5602%" height="15" fill="rgb(235,212,8)"/><text x="98.8494%" y="383.50"></text></g><g><title>_dl_map_object (2 samples, 0.56%)</title><rect x="98.5994%" y="357" width="0.5602%" height="15" fill="rgb(223,33,50)"/><text x="98.8494%" y="367.50"></text></g><g><title>_dl_map_object_from_fd (2 samples, 0.56%)</title><rect x="98.5994%" y="341" width="0.5602%" height="15" fill="rgb(219,149,13)"/><text x="98.8494%" y="351.50"></text></g><g><title>__mmap (2 samples, 0.56%)</title><rect x="98.5994%" y="325" width="0.5602%" height="15" fill="rgb(250,156,29)"/><text x="98.8494%" y="335.50"></text></g><g><title>all (357 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="511.50"></text></g><g><title>day15 (357 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(216,135,14)"/><text x="0.2500%" y="495.50">day15</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S&gt;&gt;::rustc_entry (3 samples, 0.84%)</title><rect x="99.1597%" y="469" width="0.8403%" height="15" fill="rgb(241,47,5)"/><text x="99.4097%" y="479.50"></text></g></svg></svg>